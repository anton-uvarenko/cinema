// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: social_auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocialAuthClient is the client API for SocialAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialAuthClient interface {
	GoogleAuth(ctx context.Context, in *SocialAuthPayload, opts ...grpc.CallOption) (*JwtResponse, error)
	FacebookAuth(ctx context.Context, in *SocialAuthPayload, opts ...grpc.CallOption) (*JwtResponse, error)
}

type socialAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialAuthClient(cc grpc.ClientConnInterface) SocialAuthClient {
	return &socialAuthClient{cc}
}

func (c *socialAuthClient) GoogleAuth(ctx context.Context, in *SocialAuthPayload, opts ...grpc.CallOption) (*JwtResponse, error) {
	out := new(JwtResponse)
	err := c.cc.Invoke(ctx, "/auth.SocialAuth/GoogleAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialAuthClient) FacebookAuth(ctx context.Context, in *SocialAuthPayload, opts ...grpc.CallOption) (*JwtResponse, error) {
	out := new(JwtResponse)
	err := c.cc.Invoke(ctx, "/auth.SocialAuth/FacebookAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialAuthServer is the server API for SocialAuth service.
// All implementations must embed UnimplementedSocialAuthServer
// for forward compatibility
type SocialAuthServer interface {
	GoogleAuth(context.Context, *SocialAuthPayload) (*JwtResponse, error)
	FacebookAuth(context.Context, *SocialAuthPayload) (*JwtResponse, error)
	mustEmbedUnimplementedSocialAuthServer()
}

// UnimplementedSocialAuthServer must be embedded to have forward compatible implementations.
type UnimplementedSocialAuthServer struct {
}

func (UnimplementedSocialAuthServer) GoogleAuth(context.Context, *SocialAuthPayload) (*JwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleAuth not implemented")
}
func (UnimplementedSocialAuthServer) FacebookAuth(context.Context, *SocialAuthPayload) (*JwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FacebookAuth not implemented")
}
func (UnimplementedSocialAuthServer) mustEmbedUnimplementedSocialAuthServer() {}

// UnsafeSocialAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialAuthServer will
// result in compilation errors.
type UnsafeSocialAuthServer interface {
	mustEmbedUnimplementedSocialAuthServer()
}

func RegisterSocialAuthServer(s grpc.ServiceRegistrar, srv SocialAuthServer) {
	s.RegisterService(&SocialAuth_ServiceDesc, srv)
}

func _SocialAuth_GoogleAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialAuthPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialAuthServer).GoogleAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SocialAuth/GoogleAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialAuthServer).GoogleAuth(ctx, req.(*SocialAuthPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialAuth_FacebookAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialAuthPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialAuthServer).FacebookAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SocialAuth/FacebookAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialAuthServer).FacebookAuth(ctx, req.(*SocialAuthPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialAuth_ServiceDesc is the grpc.ServiceDesc for SocialAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.SocialAuth",
	HandlerType: (*SocialAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoogleAuth",
			Handler:    _SocialAuth_GoogleAuth_Handler,
		},
		{
			MethodName: "FacebookAuth",
			Handler:    _SocialAuth_FacebookAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social_auth.proto",
}
