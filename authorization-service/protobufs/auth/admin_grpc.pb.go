// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin.proto

package auth

import (
	context "context"
	general "github.com/anton-uvarenko/cinema/authorization-service/protobufs/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminHandlerClient is the client API for AdminHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminHandlerClient interface {
	UpdateUserType(ctx context.Context, in *UpdateUserTypePayload, opts ...grpc.CallOption) (*general.JwtResponse, error)
	DelteUser(ctx context.Context, in *DeleteUserPayload, opts ...grpc.CallOption) (*general.Empty, error)
	GetAllUsers(ctx context.Context, in *general.Empty, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
}

type adminHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminHandlerClient(cc grpc.ClientConnInterface) AdminHandlerClient {
	return &adminHandlerClient{cc}
}

func (c *adminHandlerClient) UpdateUserType(ctx context.Context, in *UpdateUserTypePayload, opts ...grpc.CallOption) (*general.JwtResponse, error) {
	out := new(general.JwtResponse)
	err := c.cc.Invoke(ctx, "/auth.AdminHandler/UpdateUserType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHandlerClient) DelteUser(ctx context.Context, in *DeleteUserPayload, opts ...grpc.CallOption) (*general.Empty, error) {
	out := new(general.Empty)
	err := c.cc.Invoke(ctx, "/auth.AdminHandler/DelteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHandlerClient) GetAllUsers(ctx context.Context, in *general.Empty, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, "/auth.AdminHandler/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminHandlerServer is the server API for AdminHandler service.
// All implementations must embed UnimplementedAdminHandlerServer
// for forward compatibility
type AdminHandlerServer interface {
	UpdateUserType(context.Context, *UpdateUserTypePayload) (*general.JwtResponse, error)
	DelteUser(context.Context, *DeleteUserPayload) (*general.Empty, error)
	GetAllUsers(context.Context, *general.Empty) (*GetAllUsersResponse, error)
	mustEmbedUnimplementedAdminHandlerServer()
}

// UnimplementedAdminHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminHandlerServer struct {
}

func (UnimplementedAdminHandlerServer) UpdateUserType(context.Context, *UpdateUserTypePayload) (*general.JwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserType not implemented")
}
func (UnimplementedAdminHandlerServer) DelteUser(context.Context, *DeleteUserPayload) (*general.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelteUser not implemented")
}
func (UnimplementedAdminHandlerServer) GetAllUsers(context.Context, *general.Empty) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedAdminHandlerServer) mustEmbedUnimplementedAdminHandlerServer() {}

// UnsafeAdminHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminHandlerServer will
// result in compilation errors.
type UnsafeAdminHandlerServer interface {
	mustEmbedUnimplementedAdminHandlerServer()
}

func RegisterAdminHandlerServer(s grpc.ServiceRegistrar, srv AdminHandlerServer) {
	s.RegisterService(&AdminHandler_ServiceDesc, srv)
}

func _AdminHandler_UpdateUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTypePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHandlerServer).UpdateUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AdminHandler/UpdateUserType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHandlerServer).UpdateUserType(ctx, req.(*UpdateUserTypePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHandler_DelteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHandlerServer).DelteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AdminHandler/DelteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHandlerServer).DelteUser(ctx, req.(*DeleteUserPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHandler_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHandlerServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AdminHandler/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHandlerServer).GetAllUsers(ctx, req.(*general.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminHandler_ServiceDesc is the grpc.ServiceDesc for AdminHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AdminHandler",
	HandlerType: (*AdminHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserType",
			Handler:    _AdminHandler_UpdateUserType_Handler,
		},
		{
			MethodName: "DelteUser",
			Handler:    _AdminHandler_DelteUser_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _AdminHandler_GetAllUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
